datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENTE
  ALIADO
  VENDEDOR
  ADMIN
}

enum AlliedStatus {
  NONE
  PENDING
  APPROVED
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  name         String?
  phone        String?
  role         Role         @default(CLIENTE)
  alliedStatus AlliedStatus @default(NONE)
  commissionPercent Decimal?     @db.Decimal(5, 2)
  createdAt    DateTime     @default(now())
  addresses    Address[]
  orders       Order[]      @relation("OrderCustomer")
  sellerOrders Order[]      @relation("OrderSeller")
  commissions  Commission[]
}

model SiteSettings {
  id                      Int     @id @default(1)
  brandName               String  @default("Carpihogar.ai")
  whatsappPhone           String
  contactPhone            String
  contactEmail            String
  ivaPercent              Decimal @default(16) @db.Decimal(5, 2)
  tasaVES                 Decimal @default(40) @db.Decimal(10, 2)
  primaryColor            String?
  secondaryColor          String?
  logoUrl                 String?
  lowStockThreshold       Int     @default(5)
  sellerCommissionPercent Decimal @default(5) @db.Decimal(5, 2)
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id           String          @id @default(cuid())
  name         String
  slug         String          @unique
  brand        String
  description  String?
  images       String[]
  sku          String?         @unique
  priceUSD     Decimal         @db.Decimal(10, 2)
  priceAllyUSD Decimal?        @db.Decimal(10, 2)
  stock        Int             @default(0)
  categoryId   String?
  category     Category?       @relation(fields: [categoryId], references: [id])
  isNew        Boolean         @default(false)
  createdAt    DateTime        @default(now())
  orderItems   OrderItem[]
  stockMoves   StockMovement[]
}

enum OrderStatus {
  PENDIENTE
  CONFIRMACION
  PAGADO
  ENVIADO
  COMPLETADO
  CANCELADO
}

enum PaymentMethod {
  PAGO_MOVIL
  TRANSFERENCIA
  ZELLE
}

enum PaymentStatus {
  SIN_PRUEBA
  EN_REVISION
  RECHAZADO
  APROBADO
}

enum Currency {
  USD
  VES
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fullname  String
  phone     String
  state     String
  city      String
  zone      String?
  address1  String
  address2  String?
  notes     String?
  createdAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation("OrderCustomer", fields: [userId], references: [id])
  sellerId          String?
  seller            User?       @relation("OrderSeller", fields: [sellerId], references: [id])
  items             OrderItem[]
  subtotalUSD       Decimal     @db.Decimal(10, 2)
  ivaPercent        Decimal     @db.Decimal(5, 2)
  tasaVES           Decimal     @db.Decimal(10, 2)
  totalUSD          Decimal     @db.Decimal(10, 2)
  totalVES          Decimal     @db.Decimal(12, 2)
  payment           Payment?
  createdAt         DateTime    @default(now())
  status            OrderStatus @default(PENDIENTE)
  shippingAddressId String?
  shippingAddress   Address?    @relation(fields: [shippingAddressId], references: [id])
  shipping          Shipping?
  commission        Commission?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  priceUSD  Decimal @db.Decimal(10, 2)
  quantity  Int
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  method    PaymentMethod
  proofUrl  String?
  reference String?
  status    PaymentStatus @default(SIN_PRUEBA)
  currency  Currency      @default(USD)
  payerName String?
  payerPhone String?
  payerBank String?
  createdAt DateTime      @default(now())
}

enum CommissionStatus {
  PENDIENTE
  PAGADA
}

model Commission {
  id        String           @id @default(cuid())
  orderId   String           @unique
  order     Order            @relation(fields: [orderId], references: [id])
  sellerId  String
  seller    User             @relation(fields: [sellerId], references: [id])
  percent   Decimal          @db.Decimal(5, 2)
  amountUSD Decimal          @db.Decimal(10, 2)
  status    CommissionStatus @default(PENDIENTE)
  createdAt DateTime         @default(now())
}

enum StockMoveType {
  ENTRADA
  SALIDA
  AJUSTE
}

model StockMovement {
  id        String        @id @default(cuid())
  productId String
  product   Product       @relation(fields: [productId], references: [id])
  type      StockMoveType
  quantity  Int
  reason    String?
  userId    String?
  createdAt DateTime      @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())
}

enum ShippingCarrier {
  TEALCA
  MRW
  OTRO
}

enum ShippingStatus {
  PENDIENTE
  PREPARANDO
  DESPACHADO
  EN_TRANSITO
  ENTREGADO
  INCIDENCIA
}

model Shipping {
  id           String          @id @default(cuid())
  orderId      String          @unique
  order        Order           @relation(fields: [orderId], references: [id])
  carrier      ShippingCarrier
  tracking     String?
  status       ShippingStatus  @default(PENDIENTE)
  observations String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

