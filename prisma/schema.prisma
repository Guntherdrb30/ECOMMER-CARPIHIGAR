datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENTE
  ALIADO
  VENDEDOR
  ADMIN
}

enum AlliedStatus {
  NONE
  PENDING
  APPROVED
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  name         String?
  phone        String?
  role         Role         @default(CLIENTE)
  alliedStatus AlliedStatus @default(NONE)
  commissionPercent Decimal?     @db.Decimal(5, 2)
  // Ally profile fields (optional)
  profileImageUrl String?
  bio             String?
  services        String[]
  portfolioUrls   String[]
  portfolioText   String?
  createdAt    DateTime     @default(now())
  addresses    Address[]
  orders       Order[]      @relation("OrderCustomer")
  sellerOrders Order[]      @relation("OrderSeller")
  commissions  Commission[]
  quotes       Quote[]      @relation("QuoteCustomer")
  quotesAsSeller Quote[]    @relation("QuoteSeller")
  createdPOs   PurchaseOrder[] @relation("POCreator")
  receivedPOs  PurchaseOrder[] @relation("POReceiver")
  wishlistItems WishlistItem[]
  createdPurchases Purchase[] @relation("PurchaseCreatedBy")

  // Messaging relations
  conversations Conversation[] @relation("ConversationUser")
  assignedConversations Conversation[] @relation("ConversationAssignedTo")

  passwordResetToken          String?   @unique
  passwordResetTokenExpiresAt DateTime?
}



model SiteSettings {
  id                      Int     @id @default(1)
  brandName               String  @default("Carpihogar.ai")
  whatsappPhone           String
  contactPhone            String
  contactEmail            String
  ivaPercent              Decimal @default(16) @db.Decimal(5, 2)
  tasaVES                 Decimal @default(40) @db.Decimal(10, 2)
  primaryColor            String?
  secondaryColor          String?
  logoUrl                 String?
  homeHeroUrls            String[]
  heroAutoplayMs          Int?
  lowStockThreshold       Int     @default(5)
  sellerCommissionPercent Decimal @default(5) @db.Decimal(5, 2)
  deleteSecret            String?
  // Social handles for product buttons
  instagramHandle         String?
  tiktokHandle            String?
  // Background images for Featured Categories (Home)
  categoryBannerCarpinteriaUrl String?
  categoryBannerHogarUrl       String?
  // Root recovery and security settings (root-only)
  rootPhone               String?
  rootRecoveryHash        String?
  rootResetCode           String?
  rootResetCodeExpiresAt  DateTime?
  // Defaults for product margins (root configurable)
  defaultMarginClientPct   Decimal? @db.Decimal(5, 2)
  defaultMarginAllyPct     Decimal? @db.Decimal(5, 2)
  defaultMarginWholesalePct Decimal? @db.Decimal(5, 2)
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  parentId  String?
  parent    Category? @relation("CategoryChildren", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryChildren")
  products  Product[]
}

model Product {
  id           String          @id @default(cuid())
  name         String
  slug         String          @unique
  brand        String
  description  String?
  images       String[]
  // Optional product video (rendered last in gallery)
  videoUrl     String?
  // Show Instagram/TikTok buttons in PDP
  showSocialButtons Boolean @default(false)
  sku          String?         @unique
  // Código interno opcional (puede venir de proveedor)
  code         String?         @unique
  priceUSD     Decimal         @db.Decimal(10, 2)
  priceAllyUSD Decimal?        @db.Decimal(10, 2)
  // Nuevo: Precio mayorista (calculado)
  priceWholesaleUSD Decimal?   @db.Decimal(10, 2)
  // Nuevo: costos y márgenes de referencia
  costUSD      Decimal?        @db.Decimal(10, 2)
  marginClientPct   Decimal?   @db.Decimal(5, 2)
  marginAllyPct     Decimal?   @db.Decimal(5, 2)
  marginWholesalePct Decimal?  @db.Decimal(5, 2)
  // Nuevo: precios calculados explícitos (el priceUSD existente se usa como Cliente)
  priceClientUSD    Decimal?   @db.Decimal(10, 2)
  stock        Int             @default(0)
  supplierId   String?
  supplier     Supplier?       @relation(fields: [supplierId], references: [id])
  reorderPoint Int?
  safetyStock  Int?
  leadTimeDays Int?
  costMethod   CostMethod      @default(PROMEDIO)
  avgCost      Decimal?        @db.Decimal(10, 2)
  lastCost     Decimal?        @db.Decimal(10, 2)
  categoryId   String?
  category     Category?       @relation(fields: [categoryId], references: [id])
  isNew        Boolean         @default(false)
  createdAt    DateTime        @default(now())
  barcode      String?         @unique
  orderItems   OrderItem[]
  stockMoves   StockMovement[]
  purchaseOrderItems PurchaseOrderItem[]
  quoteItems   QuoteItem[]
  wishlistItems WishlistItem[]
  purchaseItems PurchaseItem[]
  // Self-referencing many-to-many for related products
  relatedFrom  RelatedProduct[] @relation("RelatedFrom")
  relatedTo    RelatedProduct[] @relation("RelatedTo")
}

// Join table for Product <-> Product related items
model RelatedProduct {
  fromId   String
  toId     String
  from     Product @relation("RelatedFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to       Product @relation("RelatedTo", fields: [toId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([fromId, toId])
}

enum OrderStatus {
  PENDIENTE
  CONFIRMACION
  PAGADO
  ENVIADO
  COMPLETADO
  CANCELADO
}

// Tipo de venta
enum SaleType {
  CONTADO
  CREDITO
}

enum PaymentMethod {
  PAGO_MOVIL
  TRANSFERENCIA
  ZELLE
}

enum PaymentStatus {
  SIN_PRUEBA
  EN_REVISION
  RECHAZADO
  APROBADO
}

enum Currency {
  USD
  VES
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  fullname  String
  phone     String
  state     String
  city      String
  zone      String?
  address1  String
  address2  String?
  notes     String?
  createdAt DateTime @default(now())
  orders    Order[]
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation("OrderCustomer", fields: [userId], references: [id])
  sellerId          String?
  seller            User?       @relation("OrderSeller", fields: [sellerId], references: [id])
  items             OrderItem[]
  subtotalUSD       Decimal     @db.Decimal(10, 2)
  ivaPercent        Decimal     @db.Decimal(5, 2)
  tasaVES           Decimal     @db.Decimal(10, 2)
  totalUSD          Decimal     @db.Decimal(10, 2)
  totalVES          Decimal     @db.Decimal(12, 2)
  payment           Payment?
  createdAt         DateTime    @default(now())
  status            OrderStatus @default(PENDIENTE)
  saleType          SaleType    @default(CONTADO)
  creditDueDate     DateTime?
  shippingAddressId String?
  shippingAddress   Address?    @relation(fields: [shippingAddressId], references: [id])
  shipping          Shipping?
  commission        Commission?
  receivable        Receivable?
  customerTaxId       String?
  customerFiscalAddress String?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  priceUSD  Decimal @db.Decimal(10, 2)
  quantity  Int
}

model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  method    PaymentMethod
  proofUrl  String?
  reference String?
  status    PaymentStatus @default(SIN_PRUEBA)
  currency  Currency      @default(USD)
  payerName String?
  payerPhone String?
  payerBank String?
  createdAt DateTime      @default(now())
}

enum CommissionStatus {
  PENDIENTE
  PAGADA
}

model Commission {
  id        String           @id @default(cuid())
  orderId   String           @unique
  order     Order            @relation(fields: [orderId], references: [id])
  sellerId  String
  seller    User             @relation(fields: [sellerId], references: [id])
  percent   Decimal          @db.Decimal(5, 2)
  amountUSD Decimal          @db.Decimal(10, 2)
  status    CommissionStatus @default(PENDIENTE)
  createdAt DateTime         @default(now())
}

enum QuoteStatus {
  BORRADOR
  ENVIADO
  APROBADO
  RECHAZADO
  VENCIDO
}

model Quote {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation("QuoteCustomer", fields: [userId], references: [id])
  sellerId          String?
  seller            User?       @relation("QuoteSeller", fields: [sellerId], references: [id])
  items             QuoteItem[]
  subtotalUSD       Decimal     @db.Decimal(10, 2)
  ivaPercent        Decimal     @db.Decimal(5, 2)
  tasaVES           Decimal     @db.Decimal(10, 2)
  totalUSD          Decimal     @db.Decimal(10, 2)
  totalVES          Decimal     @db.Decimal(12, 2)
  status            QuoteStatus @default(BORRADOR)
  expiresAt         DateTime?
  notes             String?
  customerTaxId       String?
  customerFiscalAddress String?
  createdAt         DateTime    @default(now())
}

model QuoteItem {
  id        String  @id @default(cuid())
  quoteId   String
  quote     Quote   @relation(fields: [quoteId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String
  priceUSD  Decimal @db.Decimal(10, 2)
  quantity  Int
}

enum StockMoveType {
  ENTRADA
  SALIDA
  AJUSTE
}

enum CostMethod {
  PROMEDIO
  FIFO
}

model StockMovement {
  id        String        @id @default(cuid())
  productId String
  product   Product       @relation(fields: [productId], references: [id])
  type      StockMoveType
  quantity  Int
  reason    String?
  userId    String?
  createdAt DateTime      @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  taxId     String?
  address   String?
  createdAt DateTime @default(now())
  purchaseOrders PurchaseOrder[]
  purchases  Purchase[]
  products  Product[]
}

enum POStatus {
  DRAFT
  ORDERED
  RECEIVED
  CANCELLED
}

model PurchaseOrder {
  id          String       @id @default(cuid())
  supplierId  String
  supplier    Supplier     @relation(fields: [supplierId], references: [id])
  status      POStatus     @default(DRAFT)
  expectedAt  DateTime?
  totalUSD    Decimal      @default(0) @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime     @default(now())
  items       PurchaseOrderItem[]
  createdById String?
  createdBy   User?        @relation("POCreator", fields: [createdById], references: [id])
  receivedById String?
  receivedBy   User?       @relation("POReceiver", fields: [receivedById], references: [id])
  receivedAt   DateTime?
}

model PurchaseOrderItem {
  id         String   @id @default(cuid())
  poId       String
  po         PurchaseOrder @relation(fields: [poId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  received   Int      @default(0)
  costUSD    Decimal  @db.Decimal(10, 2)
}

// Compras (factura recibida)
model Purchase {
  id          String    @id @default(cuid())
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  currency    Currency  @default(USD)
  tasaVES     Decimal   @default(0) @db.Decimal(10, 2)
  subtotalUSD Decimal   @default(0) @db.Decimal(12, 2)
  totalUSD    Decimal   @default(0) @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String?
  createdBy   User?     @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  items       PurchaseItem[]
}

model PurchaseItem {
  id           String   @id @default(cuid())
  purchaseId   String
  purchase     Purchase @relation(fields: [purchaseId], references: [id])
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  name         String
  quantity     Int
  costUSD      Decimal  @db.Decimal(10, 2)
  subtotalUSD  Decimal  @db.Decimal(12, 2)
}

enum ShippingCarrier {
  TEALCA
  MRW
  FLETE_PRIVADO
  RETIRO_TIENDA
  DELIVERY
  OTRO
}

enum ShippingStatus {
  PENDIENTE
  PREPARANDO
  DESPACHADO
  EN_TRANSITO
  ENTREGADO
  INCIDENCIA
}

enum ShippingChannel {
  ONLINE
  TIENDA
}

model Shipping {
  id           String          @id @default(cuid())
  orderId      String          @unique
  order        Order           @relation(fields: [orderId], references: [id])
  carrier      ShippingCarrier
  tracking     String?
  status       ShippingStatus  @default(PENDIENTE)
  channel      ShippingChannel @default(TIENDA)
  observations String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}
// Estado de cuentas por cobrar
enum ReceivableStatus {
  PENDIENTE
  PARCIAL
  PAGADO
  CANCELADO
}

model Receivable {
  id         String            @id @default(cuid())
  orderId    String            @unique
  order      Order             @relation(fields: [orderId], references: [id])
  status     ReceivableStatus  @default(PENDIENTE)
  dueDate    DateTime?
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  entries    ReceivableEntry[]
}

model ReceivableEntry {
  id            String       @id @default(cuid())
  receivableId  String
  receivable    Receivable   @relation(fields: [receivableId], references: [id])
  amountUSD     Decimal      @db.Decimal(12, 2)
  currency      Currency     @default(USD)
  method        PaymentMethod?
  reference     String?
  notes         String?
  createdAt     DateTime     @default(now())
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Messaging (WhatsApp)
enum Channel {
  WHATSAPP
}

enum MessageDirection {
  IN
  OUT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum ConversationStatus {
  OPEN
  IN_PROGRESS
  PENDING
  RESOLVED
  CLOSED
}

model Conversation {
  id            String    @id @default(cuid())
  userId        String?
  user          User?     @relation("ConversationUser", fields: [userId], references: [id])
  phone         String
  channel       Channel   @default(WHATSAPP)
  assignedToId  String?
  assignedTo    User?     @relation("ConversationAssignedTo", fields: [assignedToId], references: [id])
  status        ConversationStatus @default(OPEN)
  assignedAt    DateTime?
  closedAt      DateTime?
  lastInboundAt DateTime?
  lastOutboundAt DateTime?
  unreadAgent   Int       @default(0)
  unreadCustomer Int      @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastMessageAt DateTime?
  messages      Message[]

  @@index([userId])
  @@index([phone])
  @@index([lastMessageAt])
}

model Message {
  id             String           @id @default(cuid())
  conversationId String
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  direction      MessageDirection
  status         MessageStatus    @default(SENT)
  type           String           @default("TEXT")
  text           String?
  mediaUrl       String?
  waMessageId    String?
  createdAt      DateTime         @default(now())

  @@index([conversationId, createdAt])
}

